

<feed xmlns="http://www.w3.org/2005/Atom">
  <id>https://huang-cumt.github.io/</id>
  <title>Fish</title>
  <subtitle>Test</subtitle>
  <updated>2024-06-22T18:05:36+08:00</updated>
  <author>
    <name>XinyuHuang</name>
    <uri>https://huang-cumt.github.io/</uri>
  </author>
  <link rel="self" type="application/atom+xml" href="https://huang-cumt.github.io/feed.xml"/>
  <link rel="alternate" type="text/html" hreflang="en"
    href="https://huang-cumt.github.io/"/>
  <generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator>
  <rights> © 2024 XinyuHuang </rights>
  <icon>/assets/img/favicons/favicon.ico</icon>
  <logo>/assets/img/favicons/favicon-96x96.png</logo>


  
  <entry>
    <title>Hpc学习</title>
    <link href="https://huang-cumt.github.io/posts/HPC%E5%AD%A6%E4%B9%A0/" rel="alternate" type="text/html" title="Hpc学习" />
    <published>2024-06-14T16:31:04+08:00</published>
  
    <updated>2024-06-14T16:31:04+08:00</updated>
  
    <id>https://huang-cumt.github.io/posts/HPC%E5%AD%A6%E4%B9%A0/</id>
    <content src="https://huang-cumt.github.io/posts/HPC%E5%AD%A6%E4%B9%A0/" />
    <author>
      <name>xinyu</name>
    </author>

  
    
    <category term="Learning" />
    
  

  <summary>0. HPC(High Performance Computing)高性能计算学习记录

参考链接

1. 尝试使用std::thread优化向量加法与向量点乘运算


  
    C/C++ 语言。
  
  
    [] 多线程与锁（std::thread, pthread）
  


在c++中，我们可以使用std::thread类来创建线程并进行运算，我们不能或许各个子线程的返回值，因此我们可以通过传递参数地址的形式来获取我们所感兴趣的子线程的变量值。
在线程中，所谓锁的概念事实上是由于子进程可能同时进行导致的内存读写问题所引入的机制。对于一块内存多个进行无法同时对其进行读写操作，因此如何避免可能会出现的多个线程同时访问同一块内存区域所带来的错误，因此引入了锁机制。


  [] SIMD 指令的使用
  [] OpenMP 的使用
由于有部分C++基础，选择使用str:...</summary>

  </entry>

  
  <entry>
    <title>Ubuntu网卡debug</title>
    <link href="https://huang-cumt.github.io/posts/Ubuntu%E7%BD%91%E5%8D%A1Debug/" rel="alternate" type="text/html" title="Ubuntu网卡debug" />
    <published>2024-05-24T14:31:18+08:00</published>
  
    <updated>2024-05-24T14:31:18+08:00</updated>
  
    <id>https://huang-cumt.github.io/posts/Ubuntu%E7%BD%91%E5%8D%A1Debug/</id>
    <content src="https://huang-cumt.github.io/posts/Ubuntu%E7%BD%91%E5%8D%A1Debug/" />
    <author>
      <name>xinyu</name>
    </author>

  
    
    <category term="Other" />
    
  

  <summary>0. 问题描述

系统: Ubuntu 20.04
内核版本： 6.5.0-35-generic

近期在主机上新增了一块nvme固态硬盘，新装上之后有线网卡不能正常使用，wifi可以正常使用。但是一旦移除新增的硬盘，网络又可以正常使用了。下附个人解决思路与方案。

先说结论：该问题疑似由ubuntu的udev规则机制引起，即在增加了新的固态硬盘之后，系统会重新分配网卡的名称，导致在网络配置文件中的网卡名称与实际网卡名称并不匹配，因此不能正确加载网卡配置。

解决思路：


  主机安装了双系统，切换到Windows后发现有线网络是可以正常使用的，排除硬件层面问题。
  重新安装网卡驱动，问题仍然存在，排除驱动问题。
  在不断重启中发现，有时会直接不显示网卡。


对于3.中问题，解决方案如下:
# 查看启用的网卡
ifconfig
# 查看所有网卡
ifconfig -a


可...</summary>

  </entry>

  
  <entry>
    <title>公式推导2</title>
    <link href="https://huang-cumt.github.io/posts/%E5%85%AC%E5%BC%8F%E6%8E%A8%E5%AF%BC2/" rel="alternate" type="text/html" title="公式推导2" />
    <published>2024-05-20T22:01:08+08:00</published>
  
    <updated>2024-05-20T22:01:08+08:00</updated>
  
    <id>https://huang-cumt.github.io/posts/%E5%85%AC%E5%BC%8F%E6%8E%A8%E5%AF%BC2/</id>
    <content src="https://huang-cumt.github.io/posts/%E5%85%AC%E5%BC%8F%E6%8E%A8%E5%AF%BC2/" />
    <author>
      <name>xinyu</name>
    </author>

  
    
  

  <summary>1. 约束与目标函数定义，问题初步建模
\(\begin{align}
f(\boldsymbol{x}) &amp;amp;amp;=
\sum_{\alpha}\sum_{f}{\omega_{\alpha}}
\Re
\left\{
{\left( \boldsymbol{F}_N\boldsymbol{x} \right)}^H \varGamma_{\alpha,f} {\left( \boldsymbol{F}_N\boldsymbol{x} \right)}
\right\}\\
&amp;amp;amp;=
\Re
\left\{
{\boldsymbol{x}}^H  \boldsymbol{S}  {\boldsymbol{x}}
\right\}
\end{align}\)

其中有$\varGamma=\sum_{\alpha}\sum_{f}{\omega_{\alpha}} \varGa...</summary>

  </entry>

  
  <entry>
    <title>公式推导</title>
    <link href="https://huang-cumt.github.io/posts/%E5%85%AC%E5%BC%8F%E6%8E%A8%E5%AF%BC/" rel="alternate" type="text/html" title="公式推导" />
    <published>2024-05-20T22:01:08+08:00</published>
  
    <updated>2024-05-20T22:01:08+08:00</updated>
  
    <id>https://huang-cumt.github.io/posts/%E5%85%AC%E5%BC%8F%E6%8E%A8%E5%AF%BC/</id>
    <content src="https://huang-cumt.github.io/posts/%E5%85%AC%E5%BC%8F%E6%8E%A8%E5%AF%BC/" />
    <author>
      <name>xinyu</name>
    </author>

  
    
  

  <summary>[\begin{align}
f(\boldsymbol{x}) &amp;amp;amp;= 
\sum_{\alpha}\sum_{f}{\omega_{\alpha}} 
\Re
\left{
{\left( \boldsymbol{F}N\boldsymbol{x} \right)}^H \varGamma{\alpha,f} {\left( \boldsymbol{F}_N\boldsymbol{x} \right)}
\right}
&amp;amp;amp;=
\Re
\left{
{\boldsymbol{x}}^H  \boldsymbol{S}  {\boldsymbol{x}}
\right}
\end{align}]

其中有$\varGamma = \sum_{\alpha}\sum_{f}{\omega_{\alpha}} \varGamma_{\alpha,f}$,$\boldsymb...</summary>

  </entry>

  
  <entry>
    <title>Distant Sidelobe Suppression for Multi-Timeslot Wide-Gap Frequency-Hopping RFPA Radar 论文阅读</title>
    <link href="https://huang-cumt.github.io/posts/%E7%A7%91%E7%A0%94%E8%AE%B0%E5%BD%95-%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB-PFPA%E9%9B%B7%E8%BE%BE/" rel="alternate" type="text/html" title="Distant Sidelobe Suppression for Multi-Timeslot Wide-Gap Frequency-Hopping RFPA Radar 论文阅读" />
    <published>2024-05-18T17:13:59+08:00</published>
  
    <updated>2024-05-18T17:13:59+08:00</updated>
  
    <id>https://huang-cumt.github.io/posts/%E7%A7%91%E7%A0%94%E8%AE%B0%E5%BD%95-%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB-PFPA%E9%9B%B7%E8%BE%BE/</id>
    <content src="https://huang-cumt.github.io/posts/%E7%A7%91%E7%A0%94%E8%AE%B0%E5%BD%95-%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB-PFPA%E9%9B%B7%E8%BE%BE/" />
    <author>
      <name>xinyu</name>
    </author>

  
    
    <category term="科研记录" />
    
  

  <summary>论文地址: Distant Sidelobe Suppression for Multi-Timeslot Wide-Gap Frequency-Hopping RFPA Radar

期刊/会议: IEEE Transactions on Aerospace and Electronic Systems

发表时间: 2024

0. 前言

随机频率与脉冲重复间隔捷变(Random frequency and pulse repetition interval agile, RFPA)雷达信号有良好的低截获与抗干扰特性。但是其在距离维上存在着较多的旁瓣，这限制了它的应用。该文章提出了一种多时隙、宽间隔频率跳变序列(wide-gap frequency-hopping sequence, WGFHS)用于抑制距离旁瓣。频域分析显示其会遭到多个临近脉冲的回波能量泄露带来的影响，该文章...</summary>

  </entry>

</feed>


